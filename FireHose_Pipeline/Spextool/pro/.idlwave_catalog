;;
;; IDLWAVE catalog for library Spextool
;; Automatically Generated -- do not edit.
;; Created by idlwave_catalog on Mon Oct 16 15:38:20 2006
;;
(setq idlwave-library-catalog-libname "Spextool")
(setq idlwave-library-catalog-routines
 '(("add_rotation" fun nil (lib "add_rotation.pro" nil "Spextool") "Result = %s(ww, ss, vsini)" (nil))
   ("aptotrace" fun nil (lib "aptotrace.pro" nil "Spextool") "Result = %s(edgecoeffs, slith_arc, pos_arc, xranges, step, fitdegree, nrows)" (nil ("CANCEL") ("WID")))
   ("arrinfo" pro nil (lib "arrinfo.pro" nil "Spextool") "%s, array, ndimen, dimen, ndat, min, max, type" (nil ("CANCEL")))
   ("atmosdisp" fun nil (lib "atmosdisp.pro" nil "Spextool") "Result = %s(wave, wave_0, za, pressure, temp, water, obsalt)" (nil ("CANCEL")))
   ("avehdrs" fun nil (lib "avehdrs.pro" nil "Spextool") "Result = %s(hdrs)" (nil ("AIRMASS") ("CANCEL") ("HA") ("POSANGLE") ("TIME_OBS")))
   ("bicucoeffs" fun nil (lib "bicucoeffs.pro" nil "Spextool") "Result = %s(z, dz1, dz2, dz12, nd1, nd2)" (nil ("CANCEL")))
   ("bicuval" fun nil (lib "bicuval.pro" nil "Spextool") "Result = %s(z, dz1, dz2, dz12, xl, xu, yl, yu, x, y)" (nil ("CANCEL")))
   ("CenterTLB" pro nil (lib "centertlb.pro" nil "Spextool") "%s, tlb" (nil))
   ("cfile" fun nil (lib "cfile.pro" nil "Spextool") "Result = %s(filename)" (nil ("CANCEL") ("WIDGET_ID")))
   ("cfld" fun nil (lib "cfld.pro" nil "Spextool") "Result = %s(field_id, type)" (nil ("CANCEL") ("EMPTY")))
   ("checkaps" fun nil (lib "checkaps.pro" nil "Spextool") "Result = %s(edgecoeffs, xranges, slith_arc, appos, apradii)" (nil ("CANCEL")))
   ("cmps_form_Draw_Coords" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, drawpixperunit, xoff, yoff, xsize, ysize" (nil))
   ("cmps_form_Real_Coords" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, drawpixperunit, xoff, yoff, xsize, ysize" (nil))
   ("cmps_form_Select_File" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, event" (nil))
   ("cmps_form_PlotBox_Coords" fun nil (lib "cmps_form.pro" nil "Spextool") "Result = %s(xsize, ysize, xoff, yoff, drawpixperunit)" (nil))
   ("cmps_form_conv_pscoord" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, info, xpagesize, ypagesize" (nil ("tohuman") ("toidl")))
   ("cmps_form_papernames" fun nil (lib "cmps_form.pro" nil "Spextool") "Result = %s" (nil))
   ("cmps_form_select_papersize" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, papertype, xpagesize, ypagesize" (nil ("inches") ("index") ("landscape")))
   ("cmps_form_load_configs" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, defaultpaper, configs" (nil))
   ("cmps_form_Update_Info" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, info" (nil ("_EXTRA") ("set")))
   ("cmps_form_draw_box" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, xsize, ysize, xoff, yoff, info" (nil))
   ("cmps_form_draw_form" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, info" (nil ("nobox")))
   ("cmps_form_Null_Events" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, event" (nil))
   ("cmps_form_What_Button_Type" fun nil (lib "cmps_form.pro" nil "Spextool") "Result = %s(event)" (nil))
   ("cmps_form_What_Button_Pressed" fun nil (lib "cmps_form.pro" nil "Spextool") "Result = %s(event)" (nil))
   ("cmps_form_What_Button_Released" fun nil (lib "cmps_form.pro" nil "Spextool") "Result = %s(event)" (nil))
   ("cmps_form_NumEvents" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, event" (nil))
   ("cmps_form_Move_Box" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, event" (nil))
   ("cmps_form_Grow_Box" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, event" (nil))
   ("cmps_form_Box_Events" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, event" (nil))
   ("cmps_form_predef_events" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, event" (nil))
   ("cmps_form_Event" pro nil (lib "cmps_form.pro" nil "Spextool") "%s, event" (nil))
   ("cmps_form" fun nil (lib "cmps_form.pro" nil "Spextool") "Result = %s(xoffset, yoffset)" (nil ("aspect") ("Bits_Per_Pixel") ("button_names") ("button_sel") ("Cancel") ("Color") ("Create") ("DefaultPaper") ("Defaults") ("Encapsulated") ("Filename") ("Help") ("Inches") ("Initialize") ("Landscape") ("LocalDefaults") ("NoCommon") ("pagebox") ("PaperSize") ("parent") ("PreDefined") ("preserve_aspect") ("select") ("XOffset") ("xpagesize") ("XSize") ("YOffset") ("ypagesize") ("YSize")))
   ("concatimg" fun nil (lib "concatimg.pro" nil "Spextool") "Result = %s(image1, image2, edgecoeffs, xranges, norders, orders, orders1, orders2)" (nil ("CANCEL")))
   ("concatimgs" fun nil (lib "concatimgs.pro" nil "Spextool") "Result = %s(image1, image2, edgecoeffs, xranges, orders, orders1, orders2)" (nil ("CANCEL")))
   ("convolvespec" pro nil (lib "convolvespec.pro" nil "Spextool") "%s, wave, flux, FWHM, cflux, cerror" (nil ("CANCEL") ("ERROR") ("KHWIDTH")))
   ("COYOTE_Field_ReturnValue" fun nil (lib "coyote_field2.pro" nil "Spextool") "Result = %s(inputValue, dataType)" (nil))
   ("COYOTE_Field_Validate" fun nil (lib "coyote_field2.pro" nil "Spextool") "Result = %s(value, dataType)" (nil ("Decimal") ("Digits") ("Positive")))
   ("COYOTE_Field__Define" pro nil (lib "coyote_field2.pro" nil "Spextool") "%s" (nil))
   ("COYOTE_Field_Kill_Notify" pro nil (lib "coyote_field2.pro" nil "Spextool") "%s, ID" (nil))
   ("COYOTE_Field_Set_Value" pro nil (lib "coyote_field2.pro" nil "Spextool") "%s, cw_tlb, value" (nil))
   ("COYOTE_Field_Get_Value" fun nil (lib "coyote_field2.pro" nil "Spextool") "Result = %s(cw_tlb)" (nil))
   ("COYOTE_Field_Event_Handler" pro nil (lib "coyote_field2.pro" nil "Spextool") "%s, event" (nil))
   ("COYOTE_Field2" fun nil (lib "coyote_field2.pro" nil "Spextool") "Result = %s(parent)" (nil ("Column") ("CR_Only") ("Decimal") ("Digits") ("DoubleValue") ("Event_Func") ("Event_Pro") ("FieldFont") ("FloatValue") ("Frame") ("IntegerValue") ("LabelFont") ("LabelSize") ("LongValue") ("Positive") ("Row") ("Scr_XSize") ("Scr_YSize") ("StringValue") ("textID") ("Title") ("UValue") ("Value") ("XSize")))
   ("Example_Event" pro nil (lib "coyote_field2.pro" nil "Spextool") "%s, event" (nil))
   ("Example" pro nil (lib "coyote_field2.pro" nil "Spextool") "%s" (nil))
   ("cpar" fun nil (lib "cpar.pro" nil "Spextool") "Result = %s(progname, parameter, parnum, parname, types, dimens)" (nil))
   ("cpath" fun nil (lib "cpath.pro" nil "Spextool") "Result = %s(path)" (nil ("CANCEL") ("WIDGET_ID")))
   ("crange" fun nil (lib "crange.pro" nil "Spextool") "Result = %s(value, range, name)" (nil ("CANCEL") ("EVEN") ("KGE") ("KGT") ("KLE") ("KLT") ("ODD") ("WIDGET_ID")))
   ("Diagovec" fun nil (lib "diagovec.pro" nil "Spextool") "Result = %s(arr)" (nil))
   ("extractspec2d_ps" fun nil (lib "extractspec2d_ps.pro" nil "Spextool") "Result = %s(image, var, edgecoeffs, tracecoeffs, norders, naps, start, stop, xranges, slith_arc, slith_pix, apradii, apsign)" (nil ("BDPIXTHRESH") ("BDPXMK") ("BGORDER") ("BGSTART") ("BGWIDTH") ("CANCEL") ("SPATCOEFFS") ("UPDATE") ("WIDGET_ID")))
   ("extractspec2d_xs" fun nil (lib "extractspec2d_xs.pro" nil "Spextool") "Result = %s(image, var, edgecoeffs, tracecoeffs, norders, naps, start, stop, xranges, slith_arc, slith_pix, apradii)" (nil ("BDPIXTHRESH") ("BGORDER") ("BGR") ("CANCEL") ("SPATCOEFFS") ("UPDATE") ("WIDGET_ID")))
   ("extractspec_ps" fun nil (lib "extractspec_ps.pro" nil "Spextool") "Result = %s(image, var, edgecoeffs, tracecoeffs, norders, naps, start, stop, xranges, slith_arc, apradii, apsign)" (nil ("BDPIXTHRESH") ("BDPXMK") ("BGORDER") ("BGSTART") ("BGSUBIMG") ("BGWIDTH") ("CANCEL") ("ERRORPROP") ("PSFWIDTH") ("SPATCOEFFS") ("STDSPECTRA") ("UPDATE") ("WIDGET_ID")))
   ("extractspec_xs" fun nil (lib "extractspec_xs.pro" nil "Spextool") "Result = %s(image, var, edgecoeffs, tracecoeffs, norders, naps, start, stop, xranges, slith_arc, apradii)" (nil ("BDPIXTHRESH") ("BDPXMK") ("BGORDER") ("BGR") ("BGSUBIMG") ("CANCEL") ("ERRORPROP") ("SPATCOEFFS") ("UPDATE") ("WIDGET_ID")))
   ("findfiles" fun nil (lib "findfiles.pro" nil "Spextool") "Result = %s(sarr)" (nil ("CANCEL") ("COUNT") ("FILENAMES")))
   ("FINDIDX" pro nil (lib "findidx.pro" nil "Spextool") "%s, XARR, X, IEFF" (nil))
   ("findlines" fun nil (lib "findlines.pro" nil "Spextool") "Result = %s(x, y, xguess, sigma)" (nil ("CANCEL") ("GOODBAD") ("PLOT") ("WLINES")))
   ("findorders" pro nil (lib "findorders.pro" nil "Spextool") "%s, image, guesspos, start, stop, step, slith_pix, degree, edgecoeffs, xranges" (nil ("CANCEL") ("COMWIDTH") ("FRAC") ("PLOTGUESS") ("WID")))
   ("findoutliers" fun nil (lib "findoutliers.pro" nil "Spextool") "Result = %s(data, thresh)" (nil ("CANCEL") ("MAD") ("MEDIAN")))
   ("findpeaks" pro nil (lib "findpeaks.pro" nil "Spextool") "%s, profiles, npeaks, doorders, positions, apsign" (nil ("AUTO") ("CANCEL") ("FIXED") ("GUESS")))
   ("findspexarcs" fun nil (lib "findspexarcs.pro" nil "Spextool") "Result = %s(files)" (nil ("AB") ("CANCEL") ("MASK")))
   ("findspexflats" fun nil (lib "findspexflats.pro" nil "Spextool") "Result = %s(files)" (nil ("CANCEL") ("MASK")))
   ("fiterpolate" fun nil (lib "fiterpolate.pro" nil "Spextool") "Result = %s(image, ncg, nrg)" (nil ("CANCEL")))
   ("fixbdpx_median" fun nil (lib "fixbdpx_median.pro" nil "Spextool") "Result = %s(image, mask, edgecoeffs, norders, xranges, window)" (nil ("CANCEL")))
   ("fixbdpx_profiles" pro nil (lib "fixbdpx_profiles.pro" nil "Spextool") "%s, image, var, mask, edgecoeffs, profiles, doorders, slith_arc, norders, xranges" (nil ("CANCEL") ("UPDATE") ("WIDGET_ID")))
   ("flatdata" pro nil (lib "flatdata.pro" nil "Spextool") "%s, data, var, flat, norders, edgecoeffs, xranges, rms" (nil ("CANCEL")))
   ("fsextract" fun nil (lib "fsextract.pro" nil "Spextool") "Result = %s(string)" (nil ("CANCEL") ("FILENAME") ("INDEX") ("NFILES")))
   ("GAUSSJ" pro nil (lib "gaussj.pro" nil "Spextool") "%s, aa, bb" (nil ("inverted") ("solution")))
   ("getfonts" pro nil (lib "getfonts.pro" nil "Spextool") "%s, buttonfont, fieldfont" (nil ("CANCEL")))
   ("gethdrinfo" fun nil (lib "gethdrinfo.pro" nil "Spextool") "Result = %s(hdr, keywords)" (nil ("CANCEL") ("IGNOREMISSING") ("STRING")))
   ("getosinfo" pro nil (lib "getosinfo.pro" nil "Spextool") "%s, dirsep, strsep" (nil ("CANCEL")))
   ("getspecscale" fun nil (lib "getspecscale.pro" nil "Spextool") "Result = %s(stack)" (nil ("CANCEL") ("IDX")))
   ("imagepoly" fun nil (lib "imagepoly.pro" nil "Spextool") "Result = %s(x, c)" (nil ("CANCEL")))
   ("imginfo" pro nil (lib "imginfo.pro" nil "Spextool") "%s, img, ncols, nrows, ndat, min, max, type" (nil ("CANCEL")))
   ("instrprof" fun nil (lib "instrprof.pro" nil "Spextool") "Result = %s(x, parms)" (nil ("CANCEL")))
   ("ls2fit" fun nil (lib "interpolv.pro" nil "Spextool") "Result = %s(xx, y, xm)" (nil))
   ("INTERPOLV" fun nil (lib "interpolv.pro" nil "Spextool") "Result = %s(V, X, U)" (nil ("LSQUADRATIC") ("QUADRATIC") ("SPLINE")))
   ("interpspec" pro nil (lib "interpspec.pro" nil "Spextool") "%s, xa, ya, x, y, yerror" (nil ("CANCEL") ("LEAVENANS") ("YAERROR")))
   ("lightloss" pro nil (lib "lightloss.pro" nil "Spextool") "%s, objfile, stdfile, wguide, seeing, outfile" (nil ("CANCEL")))
   ("lincorrect" fun nil (lib "lincorrect.pro" nil "Spextool") "Result = %s(image, itime, slowcnts, ndr, coefficients, saturation, saturated)" (nil ("CANCEL")))
   ("maskorders" fun nil (lib "maskorders.pro" nil "Spextool") "Result = %s(image, edgecoeffs, ybuffer)" (nil ("CANCEL") ("MAX") ("XRANGES")))
   ("mc_lorentzian" fun nil (lib "mc_getseeing.pro" nil "Spextool") "Result = %s(x, a)" (nil))
   ("mc_getseeing" fun nil (lib "mc_getseeing.pro" nil "Spextool") "Result = %s(profiles, orders, doorders, appos)" (nil ("CANCEL") ("GAUSSIAN")))
   ("mc_splittext" fun nil (lib "mc_splittext.pro" nil "Spextool") "Result = %s(text, length)" (nil ("CANCEL")))
   ("MC_STRSIZE" fun nil (lib "mc_strsize.pro" nil "Spextool") "Result = %s(theString, targetWidth)" (nil ("INITSIZE") ("STEP") ("WSIZE") ("XPOS") ("YPOS")))
   ("mcfxpar" fun nil (lib "mcfxpar.pro" nil "Spextool") "Result = %s(hdr, keyword)" (nil ("CANCEL")))
   ("meancomb" pro nil (lib "meancomb.pro" nil "Spextool") "%s, data, mean, mvar" (nil ("CANCEL") ("DATAVAR") ("MASK") ("NAN") ("RMS")))
   ("medcomb" pro nil (lib "medcomb.pro" nil "Spextool") "%s, data, med, var" (nil ("CANCEL") ("MAD") ("MASK") ("UPDATE") ("WIDGET_ID")))
   ("mkct" pro nil (lib "mkct.pro" nil "Spextool") "%s, cm" (nil ("BLUE") ("BOT") ("CANCEL") ("GREEN") ("INDICES") ("NAMES") ("RED")))
   ("mkfullname" fun nil (lib "mkfullname.pro" nil "Spextool") "Result = %s(files, ni, prefix, suffix)" (nil ("CANCEL") ("WIDGET_ID")))
   ("mkfullpath" fun nil (lib "mkfullpath.pro" nil "Spextool") "Result = %s(path, files)" (nil ("CANCEL") ("EXIST") ("FILENAME") ("INDEX") ("NI") ("PREFIX") ("SUFFIX") ("WIDGET_ID")))
   ("mklog" pro nil (lib "mklog.pro" nil "Spextool") "%s, ifilename, ofilename" (nil ("CANCEL")))
   ("mkmask_ps" fun nil (lib "mkmask_ps.pro" nil "Spextool") "Result = %s(slit, positions, apradius)" (nil ("BGSTART") ("BGWIDTH") ("CANCEL") ("WIDGET_ID")))
   ("mkmask_xs" fun nil (lib "mkmask_xs.pro" nil "Spextool") "Result = %s(slit, positions, apradius)" (nil ("BG") ("CANCEL") ("WIDGET_ID")))
   ("mkprofiles" fun nil (lib "mkprofiles.pro" nil "Spextool") "Result = %s(image, bdpxmk, edgecoeffs, norders, xranges, step, slith_arc, slith_pix, sg_width, sg_degree)" (nil ("CANCEL") ("PRUNE") ("THRESH") ("UPDATE") ("WIDGET_ID") ("ZERO")))
   ("mkpslist" pro nil (lib "mkpslist.pro" nil "Spextool") "%s" (nil ("CANCEL")))
   ("mkspatcoeffs" fun nil (lib "mkspatcoeffs.pro" nil "Spextool") "Result = %s(image, edgecoeffs, xranges, slith_arc, oversamp, ybuffer, maskwindow)" (nil ("CANCEL") ("SMAP") ("SPROFILES") ("UPDATE") ("WIDGET_ID") ("ZERO")))
   ("moments" pro nil (lib "moments.pro" nil "Spextool") "%s, data, mean, var, stddev, skew, kurt, mean_stddev" (nil ("CANCEL") ("DOUBLE")))
   ("mwindow" pro nil (lib "mwindow.pro" nil "Spextool") "%s" (nil ("COL") ("FCOLS") ("FROWS") ("RESET") ("ROW")))
   ("nlambda" fun nil (lib "nlambda.pro" nil "Spextool") "Result = %s(lambda, pressure, temp, water)" (nil ("CANCEL")))
   ("normspecflat" fun nil (lib "normspecflat.pro" nil "Spextool") "Result = %s(flat, edgecoeffs, xranges, slith_arc, nxgrid, nygrid, oversamp, ybuffer)" (nil ("CANCEL") ("MODEL") ("RMS") ("UPDATE") ("WIDGET_ID")))
   ("parangle" pro nil (lib "parangle.pro" nil "Spextool") "%s, HA, DEC, lat, eta, za" (nil ("CANCEL")))
   ("plotap" pro nil (lib "plotap.pro" nil "Spextool") "%s, edgecoeffs, xranges, tracecoeffs, norders, naps, slith_arc, apradius, nrows, wid" (nil ("CANCEL")))
   ("poly1d" fun nil (lib "poly1d.pro" nil "Spextool") "Result = %s(x, coeffs, coeffs_var)" (nil ("CANCEL") ("YVAR")))
   ("poly2d" fun nil (lib "poly2d.pro" nil "Spextool") "Result = %s(x, y, xorder, yorder, coeffs)" (nil ("CANCEL")))
   ("poly_fit1d" fun nil (lib "poly_fit1d.pro" nil "Spextool") "Result = %s(x, y, order)" (nil ("CANCEL") ("CHISQ") ("COVAR") ("GAUSSJ") ("GOODBAD") ("JUSTFIT") ("Q") ("RCHISQ") ("RMS") ("SILENT") ("SVD") ("THRESHSVD") ("VAR") ("YERR") ("YFIT")))
   ("poly_fit2d" fun nil (lib "poly_fit2d.pro" nil "Spextool") "Result = %s(x, y, z, xorder, yorder)" (nil ("CANCEL") ("CHISQ") ("COVAR") ("DOALPHA") ("JUSTFIT") ("Q") ("RCHISQ") ("RMS") ("SIGMA") ("SILENT") ("THRESHSVD") ("ZERR") ("ZFIT")))
   ("pscolor" fun nil (lib "pscolor.pro" nil "Spextool") "Result = %s(value)" (nil ("BACKGROUND") ("CANCEL")))
   ("quadfit" fun nil (lib "quadfit.pro" nil "Spextool") "Result = %s(img)" (nil ("CANCEL") ("CHISQ") ("COVAR") ("DOALPHA") ("ERR") ("FIT") ("JUSTFIT") ("Q") ("RCHISQ") ("RMS") ("SIGMA") ("SILENT")))
   ("rdll" pro nil (lib "rdll.pro" nil "Spextool") "%s, filename, lines, types" (nil ("CANCEL") ("RES") ("THRESH") ("WRANGE")))
   ("rdwavecal" pro nil (lib "rdwavecal.pro" nil "Spextool") "%s, filename, spectra, orders, linetypes, ltopcoeffs, homeorder, dispdeg, ordrdeg, resppix, p2lcoeffs, rms" (nil ("CANCEL")))
   ("readcal" pro nil (lib "readcal.pro" nil "Spextool") "%s, filename, modename, rotation, norders, orders, start, stop, slith_pix, slith_pix_range, slith_arc, edgedeg, norm_nxg, norm_nyg, oversamp, norm_ybuffer, fixed, guesspos" (nil ("CANCEL")))
   ("readcmfits" pro nil (lib "readcmfits.pro" nil "Spextool") "%s, files, mean, hdrinfo, var" (nil ("CANCEL") ("COADDS") ("GAIN") ("ITIME") ("KEYWORDS") ("LC_COEFF") ("MASK") ("NDRS") ("PAIR") ("READNOISE") ("READTIME") ("ROTATE") ("SATURATION") ("SKYINFO") ("SLOWCNT") ("UPDATE") ("WEIGHTED") ("WIDGET_ID")))
   ("readflat" pro nil (lib "readflat.pro" nil "Spextool") "%s, flatname, image, ncols, nrows, modename, slith_pix, slith_arc, slitw_pix, slitw_arc, norders, orders, edgecoeffs, xranges, rms, rotation, edgedeg" (nil ("CANCEL")))
   ("readinstrfile" pro nil (lib "readinstrfile.pro" nil "Spextool") "%s, filename, instr, irafname, gain, readnoise, itime, coadds, ndrs, slowcnt, readtime, time, posangle, ha, airmass, nint, bdpxmk, keywords, ncols, nrows" (nil ("CANCEL")))
   ("readmfits" pro nil (lib "readmfits.pro" nil "Spextool") "%s, files, data, hdrinfo, var" (nil ("CANCEL") ("COADDS") ("GAIN") ("ITIME") ("KEYWORDS") ("LC_COEFF") ("MASK") ("NDRS") ("NIMAGES") ("PAIR") ("READNOISE") ("READTIME") ("ROTATE") ("SATURATION") ("SLOWCNT") ("WIDGET_ID")))
   ("readspec" pro nil (lib "readspec.pro" nil "Spextool") "%s, specname, spc, hdr, obsmode, start, stop, norders, naps, orders, xunits, yunits, slith_pix, slith_arc, slitw_pix, slitw_arc, airmass, xtitle, ytitle" (nil ("CANCEL")))
   ("readtrace" pro nil (lib "readtrace.pro" nil "Spextool") "%s, filename, modename, orders, naps, fitdeg, tracecoeffs" (nil ("CANCEL")))
   ("readwavecal" pro nil (lib "readwavecal.pro" nil "Spextool") "%s, filename, norders, ltopcoeffs, homeorder, disdeg, orderdeg, res_factor, xcor_orders" (nil ("CANCEL")))
   ("rectorder" fun nil (lib "rectorder.pro" nil "Spextool") "Result = %s(image, edgecoeffs, xranges, slith_arc, step, oversamp, ybuffer)" (nil ("CANCEL") ("UPDATE") ("WIDGET_ID") ("YARC")))
   ("redden" pro nil (lib "redden.pro" nil "Spextool") "%s, wave, flux, ebmv, fredd" (nil ("CANCEL") ("R_V")))
   ("reorder" fun nil (lib "reorder.pro" nil "Spextool") "Result = %s(fullpaths)" (nil ("CANCEL") ("FILES")))
   ("replicas" fun nil (lib "replicas.pro" nil "Spextool") "Result = %s(array, ncopies)" (nil ("help")))
   ("rieke_UNRED" pro nil (lib "rieke_unred.pro" nil "Spextool") "%s, wave, flux, ebv, funred" (nil ("R_V")))
   ("robustmeancomb" pro nil (lib "robustmeancomb.pro" nil "Spextool") "%s, data, thresh, mean, mvar" (nil ("CANCEL") ("DATAVAR") ("MASK") ("RMS") ("UPDATE") ("WIDGET_ID")))
   ("robustpoly1d" fun nil (lib "robustpoly1d.pro" nil "Spextool") "Result = %s(x, y, order, thresh, eps)" (nil ("CANCEL") ("CHISQ") ("COVAR") ("GAUSSJ") ("IGOODBAD") ("JUSTFIT") ("OGOODBAD") ("Q") ("RCHISQ") ("RMS") ("SILENT") ("SVD") ("THRESHSVD") ("VAR") ("YERR") ("YFIT")))
   ("robustpoly2d" fun nil (lib "robustpoly2d.pro" nil "Spextool") "Result = %s(x, y, z, xorder, yorder, thresh, eps)" (nil ("CANCEL") ("CHISQ") ("COVAR") ("IGOODBAD") ("NDOF") ("OGOODBAD") ("Q") ("RCHISQ") ("RMS") ("SIGMA") ("SILENT") ("YFIT") ("ZERR")))
   ("robustsfactor" fun nil (lib "robustsfactor.pro" nil "Spextool") "Result = %s(refspec, spec)" (nil ("CANCEL")))
   ("robustsg" fun nil (lib "robustsg.pro" nil "Spextool") "Result = %s(x, y, width, thresh, eps)" (nil ("CANCEL") ("DEGREE") ("IGOODBAD") ("OGOODBAD") ("PLT") ("RMS")))
   ("robuststats" pro nil (lib "robuststats.pro" nil "Spextool") "%s, data, thresh, mean, var, stddev, skew, kurt" (nil ("CANCEL") ("EXCLUDE") ("IGOODBAD") ("OGOODBAD") ("SILENT")))
   ("roundgt" fun nil (lib "roundgt.pro" nil "Spextool") "Result = %s(val)" (nil ("CANCEL")))
   ("savitzky_golay" fun nil (lib "savitzky_golay.pro" nil "Spextool") "Result = %s(data, width)" (nil ("COEFFICIENTS") ("DEGREE") ("DERIV_ORDER") ("ERROR") ("NLEFT") ("NRIGHT")))
   ("scaleimages" pro nil (lib "scaleimages.pro" nil "Spextool") "%s, data, var" (nil ("CANCEL")))
   ("scalespec" pro nil (lib "scalespec.pro" nil "Spextool") "%s, stack, error" (nil ("CANCEL") ("IDX") ("MAX") ("MEDIAN")))
   ("scalespecsky" pro nil (lib "scalespecsky.pro" nil "Spextool") "%s, data, var, edgecoeffs, xranges" (nil ("CANCEL") ("UPDATE") ("WIDGEt_ID")))
   ("setfocus" pro nil (lib "setfocus.pro" nil "Spextool") "%s, field_id" (nil ("CANCEL")))
   ("CheckCancel" fun "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Result = Obj ->[%s::]%s" (nil))
   ("SetLabel" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s, newlabel" (nil))
   ("SetCancel" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s, value" (nil))
   ("SetColor" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s, color" (nil))
   ("Destroy" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s" (nil))
   ("UpDate" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s, percent" (nil))
   ("Timer_Events" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s, event" (nil))
   ("ShowProgress_Event" pro nil (lib "showprogress__define.pro" nil "Spextool") "%s, event" (nil))
   ("Start" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s" (nil))
   ("ShowProgress_Cleanup" pro nil (lib "showprogress__define.pro" nil "Spextool") "%s, tlb" (nil))
   ("ReInitialize" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s" (nil))
   ("Cleanup" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s" (nil ("AutoUpdate") ("Color") ("Delay") ("Message") ("Parent") ("Steps") ("Title") ("XSize") ("YSize")))
   ("SetProperty" pro "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Obj ->[%s::]%s" (nil ("AutoUpdate") ("Color") ("Delay") ("Message") ("Parent") ("Steps") ("Title") ("XSize") ("YSize")))
   ("Init" fun "ShowProgress" (lib "showprogress__define.pro" nil "Spextool") "Result = Obj ->[%s::]%s(parent)" (nil ("AutoUpdate") ("CancelButton") ("Color") ("Delay") ("Message") ("Steps") ("Title") ("XSize") ("YSize")))
   ("ShowProgress__Define" pro nil (lib "showprogress__define.pro" nil "Spextool") "%s" (nil))
   ("Example_Event" pro nil (lib "showprogress__define.pro" nil "Spextool") "%s, event" (nil))
   ("Example_Cleanup" pro nil (lib "showprogress__define.pro" nil "Spextool") "%s, tlb" (nil))
   ("Example" pro nil (lib "showprogress__define.pro" nil "Spextool") "%s" (nil))
   ("sincinterp" fun nil (lib "sincinterp.pro" nil "Spextool") "Result = %s(xa, ya, x)" (nil ("CANCEL")))
   ("slittrans" fun nil (lib "slittrans.pro" nil "Spextool") "Result = %s(width, height, fwhm, xoffset, yoffset)" (nil ("CANCEL")))
   ("speccor" fun nil (lib "speccor.pro" nil "Spextool") "Result = %s(stack, fwidth)" (nil ("CANCEL") ("CORRECTIONS") ("IERRSTACK") ("MASK") ("OERRSTACK") ("REFSPEC")))
   ("spex2text" pro nil (lib "spex2text.pro" nil "Spextool") "%s, filename" (nil ("CANCEL")))
   ("subspecsky" pro nil (lib "subspecsky.pro" nil "Spextool") "%s, images, var, edgecoeffs, norders, ybuffer, xranges" (nil ("CANCEL") ("DEG") ("PLOT") ("UPDATE") ("WIDGET_ID")))
   ("telluric" pro nil (lib "telluric.pro" nil "Spextool") "%s, std_wave, std_flux, std_error, std_mag, std_bminv, kernel, scales, wvega, fvega, cfvega, cf2vega, vshift, tellcor, tellcor_error, scvega" (nil ("CANCEL")))
   ("tracespec" fun nil (lib "tracespec.pro" nil "Spextool") "Result = %s(image, var, edgecoeffs, norders, naps, slith_arc, pos_arc, xranges, step, sumap, thresh, fitorder)" (nil ("CANCEL") ("WID")))
   ("tracetoap" fun nil (lib "tracetoap.pro" nil "Spextool") "Result = %s(edgecoeffs, tracecoeffs, norders, naps, slith_arc, xranges, step, nrows)" (nil ("CANCEL") ("WID")))
   ("CMCONGRID" fun nil (lib "tvimage.pro" nil "Spextool") "Result = %s(arr, x, y, z)" (nil ("Cubic") ("Half_Half") ("Interp") ("Minus_One")))
   ("TVIMAGE_ERROR" fun nil (lib "tvimage.pro" nil "Spextool") "Result = %s(theMessage)" (nil ("_Extra") ("NoName") ("Traceback")))
   ("TVIMAGE" pro nil (lib "tvimage.pro" nil "Spextool") "%s, image, x, y" (nil ("_EXTRA") ("BACKGROUND") ("ERASE") ("HALF_HALF") ("KEEP_ASPECT_RATIO") ("MARGIN") ("MINUS_ONE") ("NOINTERPOLATION") ("NORMAL") ("OVERPLOT") ("POSITION") ("TV")))
   ("unrotate" fun nil (lib "unrotate.pro" nil "Spextool") "Result = %s(image, rot)" (nil ("CANCEL")))
   ("v1tov2" pro nil (lib "v1tov2.pro" nil "Spextool") "%s, ifilename, ofilename" (nil))
   ("vegaconv" pro nil (lib "vegaconv.pro" nil "Spextool") "%s, wave, flux, wvega, fcvega, fnvega, wmin, wmax, wline, kernel, scale, maxdev, rmsdev" (nil ("CANCEL") ("STEPS") ("TWF") ("WID")))
   ("vegacorr" pro nil (lib "vegacorr.pro" nil "Spextool") "%s, wave, flux, wvin, fvin, fcvin, vshift, z" (nil ("PLOTCORR") ("WMAX") ("WMIN")))
   ("wavecal" fun nil (lib "wavecal.pro" nil "Spextool") "Result = %s(x, spectra, norders, naps, ltop, ordertypes, pixoffset, orders, homeorder, FWHM, dispdeg, ordrdeg, lines, types, robustthresh)" (nil ("CANCEL") ("PLOTLINEFIND") ("PLOTRESID") ("RMS") ("UPDATE") ("WIDGET_ID")))
   ("WhereToMulti" pro nil (lib "wheretomulti.pro" nil "Spextool") "%s, Array, Indices, Col, Row, Frame" (nil))
   ("writearc" pro nil (lib "writearc.pro" nil "Spextool") "%s, arc, outname, hdrinfo, version" (nil ("CANCEL") ("HISTORY")))
   ("writecomb" pro nil (lib "writecomb.pro" nil "Spextool") "%s, image, outname, hdrinfo" (nil ("CANCEL") ("HISTORY")))
   ("writeflat" pro nil (lib "writeflat.pro" nil "Spextool") "%s, normflat, hdrinfo, rotation, orders, edgecoeffs, xranges, slith_pix, slith_arc, slitw_pix, slitw_arc, modename, rms, version, outname" (nil ("CANCEL") ("HISTORY")))
   ("writesky" pro nil (lib "writesky.pro" nil "Spextool") "%s, sky, outname, hdrinfo" (nil ("CANCEL") ("HISTORY")))
   ("writespec_ps" pro nil (lib "writespec_ps.pro" nil "Spextool") "%s, spectra, fullpath, aimage, sky, flat, naps, orders, start, stop, hdrinfo, appos, apradius, mode, slith_pix, slith_arc, slitw_pix, slitw_arc, xunits, yunits, xtitle, ytitle, version" (nil ("BGORDER") ("BGSTART") ("BGWIDTH") ("CANCEL") ("DISP") ("EXT2D") ("FITS") ("LINEARITY") ("PSFRADIUS") ("RES") ("RMS") ("TEXT") ("TRACEFILE") ("WAVECAL")))
   ("writespec_xs" pro nil (lib "writespec_xs.pro" nil "Spextool") "%s, spectra, fullpath, aimage, sky, flat, naps, orders, start, stop, hdrinfo, appos, apradius, mode, slith_pix, slith_arc, slitw_pix, slitw_arc, xunits, yunits, xtitle, ytitle, version" (nil ("BGORDER") ("BGR") ("CANCEL") ("DISP") ("EXT2D") ("FITS") ("LINEARITY") ("RES") ("RMS") ("TEXT") ("TRACEFILE") ("WAVECAL")))
   ("xcleanspec_cleanup" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, base" (nil))
   ("xcleanspec_help" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcleanspec_loadspec" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcleanspec_plotsn" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcleanspec_plotflux" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, state" (nil ("PS")))
   ("xcleanspec_plotupdate" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, state" (nil ("PS")))
   ("xcleanspec_setminmax" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcleanspec_smoothspec" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcleanspec_writefile" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcleanspec_zoom" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, state" (nil ("IN") ("OUT")))
   ("xcleanspec_event" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, event" (nil))
   ("xcleanspec_plotwinevent1" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, event" (nil))
   ("xcleanspec_plotwinevent2" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, event" (nil))
   ("xcleanspec_minmax" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, event" (nil))
   ("xcleanspec_resize" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s, event" (nil))
   ("xcleanspec" pro nil (lib "xcleanspec.pro" nil "Spextool") "%s" (nil))
   ("xcombspec_event" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, event" (nil))
   ("xcombspec_plotwin_event" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, event" (nil))
   ("xcombspec_resize" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, event" (nil))
   ("xcombspec_cleanup" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, xcombspec_base" (nil))
   ("xcombspec_combinespec" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcombspec_correctspec" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcombspec_writefile" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcombspec_help" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcombspec_loadspec" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcombspec_mkmask" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state, index" (nil))
   ("xcombspec_modwinsize" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcombspec_plotspec" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcombspec_plotupdate" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state" (nil))
   ("xcombspec_scalespec" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state, index" (nil))
   ("xcombspec_selectspec" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, state, index" (nil))
   ("xcombspec" pro nil (lib "xcombspec.pro" nil "Spextool") "%s, instrfile" (nil ("BASIC")))
   ("xconkern_initcommon" pro nil (lib "xconkern.pro" nil "Spextool") "%s, std_wave, std_flux, wvega, fvega, fcvega, fc2vega, awave, atrans" (nil ("XTITLE") ("YTITLE")))
   ("xconkern_conkernel" pro nil (lib "xconkern.pro" nil "Spextool") "%s" (nil))
   ("xconkern_definenormreg" pro nil (lib "xconkern.pro" nil "Spextool") "%s" (nil))
   ("xconkern_normspec" pro nil (lib "xconkern.pro" nil "Spextool") "%s" (nil))
   ("xconkern_plotupdate" pro nil (lib "xconkern.pro" nil "Spextool") "%s" (nil))
   ("xconkern_whichline" pro nil (lib "xconkern.pro" nil "Spextool") "%s" (nil))
   ("xconkern_zoom" pro nil (lib "xconkern.pro" nil "Spextool") "%s" (nil ("IN") ("OUT")))
   ("xconkern_event" pro nil (lib "xconkern.pro" nil "Spextool") "%s, event" (nil))
   ("xconkern_plotwinevent1" pro nil (lib "xconkern.pro" nil "Spextool") "%s, event" (nil))
   ("xconkern_plotwinevent2" pro nil (lib "xconkern.pro" nil "Spextool") "%s, event" (nil))
   ("xconkern_resize" pro nil (lib "xconkern.pro" nil "Spextool") "%s, event" (nil))
   ("xconkern" pro nil (lib "xconkern.pro" nil "Spextool") "%s, std_wave, std_flux, wvega, fvega, fcvega, fc2vega, awave, atrans, wline, kernel, scale, vshift, maxdev, rmsdev" (nil ("CANCEL") ("PARENT") ("XTITLE") ("YTITLE")))
   ("xfindshift_initcommon" pro nil (lib "xfindshift.pro" nil "Spextool") "%s, objwave, objflux, telflux" (nil ("INITSHIFT") ("XTITLE")))
   ("xfindshift_autofind" pro nil (lib "xfindshift.pro" nil "Spextool") "%s" (nil))
   ("xfindshift_plotresid" pro nil (lib "xfindshift.pro" nil "Spextool") "%s" (nil))
   ("xfindshift_plotspec" pro nil (lib "xfindshift.pro" nil "Spextool") "%s" (nil))
   ("xfindshift_plotupdate" pro nil (lib "xfindshift.pro" nil "Spextool") "%s" (nil))
   ("xfindshift_setminmax" pro nil (lib "xfindshift.pro" nil "Spextool") "%s" (nil))
   ("xfindshift_shiftspec" pro nil (lib "xfindshift.pro" nil "Spextool") "%s" (nil))
   ("xfindshift_setup" pro nil (lib "xfindshift.pro" nil "Spextool") "%s" (nil))
   ("xfindshift_event" pro nil (lib "xfindshift.pro" nil "Spextool") "%s, event" (nil))
   ("xfindshift_plotwinevent1" pro nil (lib "xfindshift.pro" nil "Spextool") "%s, event" (nil))
   ("xfindshift_plotwinevent2" pro nil (lib "xfindshift.pro" nil "Spextool") "%s, event" (nil))
   ("xfindshift_minmax" pro nil (lib "xfindshift.pro" nil "Spextool") "%s, event" (nil))
   ("xfindshift_resize" pro nil (lib "xfindshift.pro" nil "Spextool") "%s, event" (nil))
   ("xfindshift" fun nil (lib "xfindshift.pro" nil "Spextool") "Result = %s(objwave, objflux, telflux)" (nil ("CANCEL") ("INITSHIFT") ("PARENT") ("XTITLE")))
   ("xfixwavecal_event" pro nil (lib "xfixwavecal.pro" nil "Spextool") "%s, event" (nil))
   ("xfixwavecal_fixwavecal" pro nil (lib "xfixwavecal.pro" nil "Spextool") "%s, state" (nil))
   ("xfixwavecal" pro nil (lib "xfixwavecal.pro" nil "Spextool") "%s" (nil))
   ("xfwc_event" pro nil (lib "xfwc.pro" nil "Spextool") "%s, event" (nil))
   ("xfwc_cleanup" pro nil (lib "xfwc.pro" nil "Spextool") "%s, xfwc_base" (nil))
   ("xfwc_fix" pro nil (lib "xfwc.pro" nil "Spextool") "%s, state" (nil))
   ("xfwc" pro nil (lib "xfwc.pro" nil "Spextool") "%s" (nil))
   ("xgetoffset_event" pro nil (lib "xgetoffset.pro" nil "Spextool") "%s, event" (nil))
   ("xgetoffset_cleanup" pro nil (lib "xgetoffset.pro" nil "Spextool") "%s, xgetoffset_base" (nil))
   ("xgetoffset_plotspec" pro nil (lib "xgetoffset.pro" nil "Spextool") "%s, state" (nil ("SPEC1") ("SPEC2")))
   ("xgetoffset_zoom" pro nil (lib "xgetoffset.pro" nil "Spextool") "%s, state" (nil ("SPEC1") ("SPEC2")))
   ("xgetoffset" pro nil (lib "xgetoffset.pro" nil "Spextool") "%s, x1, y1, x2, y2, offset" (nil ("CANCEL") ("ORDER")))
   ("ximgmath_event" pro nil (lib "ximgmath.pro" nil "Spextool") "%s, event" (nil))
   ("ximgmath_cleanup" pro nil (lib "ximgmath.pro" nil "Spextool") "%s, ximgmath_base" (nil))
   ("ximgmath_math" pro nil (lib "ximgmath.pro" nil "Spextool") "%s, state" (nil))
   ("ximgmath" pro nil (lib "ximgmath.pro" nil "Spextool") "%s" (nil ("GROUP_LEADER")))
   ("ximgtool_startup" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil ("GROUP_LEADER") ("STDIMAGE")))
   ("ximgtool_blink" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_bytsclimg" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_chbuffer" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_chcmap" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_clearoverlays" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil ("REDRAW")))
   ("ximgtool_stretchct" pro nil (lib "ximgtool.pro" nil "Spextool") "%s, event" (nil ("BRICON")))
   ("ximgtool_imgmath" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_imgrange" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_help" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_linecut" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_loadimage" pro nil (lib "ximgtool.pro" nil "Spextool") "%s, img" (nil ("AUTORANGE") ("BUFFER") ("CANCEL") ("CMAP") ("MASK") ("NOUPDATE") ("RANGE") ("ROTATION") ("SCALING") ("STDIMAGE") ("ZRANGE") ("ZWINPOS")))
   ("ximgtool_minmax" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_mkplotimg" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_moments" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_movecursor" pro nil (lib "ximgtool.pro" nil "Spextool") "%s, direction" (nil))
   ("ximgtool_plotupdate" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil ("CENTER") ("ERASE") ("TRACKWIN")))
   ("ximgtool_rotateimg" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_setminmax" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_trackwin" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_updateinfobar" pro nil (lib "ximgtool.pro" nil "Spextool") "%s" (nil))
   ("ximgtool_updatemenu" pro nil (lib "ximgtool.pro" nil "Spextool") "%s, type, button" (nil))
   ("ximgtool_cleanup" pro nil (lib "ximgtool.pro" nil "Spextool") "%s, event" (nil))
   ("ximgtool_event" pro nil (lib "ximgtool.pro" nil "Spextool") "%s, event" (nil))
   ("ximgtool_plotwin_event" pro nil (lib "ximgtool.pro" nil "Spextool") "%s, event" (nil))
   ("ximgtool_resize" pro nil (lib "ximgtool.pro" nil "Spextool") "%s, event" (nil))
   ("ximgtool" pro nil (lib "ximgtool.pro" nil "Spextool") "%s, img" (nil ("AUTORANGE") ("BUFFER") ("CANCEL") ("CMAP") ("GROUP_LEADER") ("MASK") ("NOUPDATE") ("RANGE") ("ROTATION") ("SCALING") ("STDIMAGE") ("WID") ("ZRANGE") ("ZWINPOS")))
   ("xlightloss_event" pro nil (lib "xlightloss.pro" nil "Spextool") "%s, event" (nil))
   ("xlightloss_cleanup" pro nil (lib "xlightloss.pro" nil "Spextool") "%s, junk" (nil))
   ("xlightloss_correctspec" pro nil (lib "xlightloss.pro" nil "Spextool") "%s, state" (nil))
   ("xlightloss_help" pro nil (lib "xlightloss.pro" nil "Spextool") "%s, state" (nil))
   ("xlightloss" pro nil (lib "xlightloss.pro" nil "Spextool") "%s" (nil))
   ("xlinefind_startup" pro nil (lib "xlinefind.pro" nil "Spextool") "%s" (nil ("WID")))
   ("xlinefind_cleanup" pro nil (lib "xlinefind.pro" nil "Spextool") "%s, xlinefind_base" (nil))
   ("xlinefind_help" pro nil (lib "xlinefind.pro" nil "Spextool") "%s" (nil))
   ("xlinefind_plotspec" pro nil (lib "xlinefind.pro" nil "Spextool") "%s" (nil ("PS")))
   ("xlinefind_setminmax" pro nil (lib "xlinefind.pro" nil "Spextool") "%s" (nil))
   ("xlinefind_zoom" pro nil (lib "xlinefind.pro" nil "Spextool") "%s" (nil ("IN") ("OUT")))
   ("xlinefind_event" pro nil (lib "xlinefind.pro" nil "Spextool") "%s, event" (nil))
   ("xlinefind_plotwin_event" pro nil (lib "xlinefind.pro" nil "Spextool") "%s, event" (nil))
   ("xlinefind_minmax_event" pro nil (lib "xlinefind.pro" nil "Spextool") "%s, event" (nil))
   ("xlinefind_resize_event" pro nil (lib "xlinefind.pro" nil "Spextool") "%s, event" (nil))
   ("xlinefind" pro nil (lib "xlinefind.pro" nil "Spextool") "%s, wave, flux" (nil ("CANCEL") ("TITLE") ("WID") ("XTITLE") ("YTITLE")))
   ("xmc_displaytext_done" pro nil (lib "xmc_displaytext.pro" nil "Spextool") "%s, event" (nil))
   ("xmc_displaytext_resize" pro nil (lib "xmc_displaytext.pro" nil "Spextool") "%s, event" (nil))
   ("xmc_displaytext" pro nil (lib "xmc_displaytext.pro" nil "Spextool") "%s, input" (nil ("CANCEL") ("GROUP_LEADER") ("TITLE") ("WSIZE")))
   ("xmergeorders_addorder" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_autoscale" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_cleanup" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, base" (nil))
   ("xmergeorders_combinespec" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_cutscalespec" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_getminmax1" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_getminmax2" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_help" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_loadspec" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_mergespec" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_modaddorder" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_modanchor" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state, index" (nil))
   ("xmergeorders_ploterror" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_plotflux" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_plotupdate" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_setminmax" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_writefile" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil))
   ("xmergeorders_zoom" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, state" (nil ("IN") ("OUT")))
   ("xmergeorders_event" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, event" (nil))
   ("xmergeorders_minmax" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, event" (nil))
   ("xmergeorders_plotwinevent1" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, event" (nil))
   ("xmergeorders_plotwinevent2" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, event" (nil))
   ("xmergeorders_resize" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s, event" (nil))
   ("xmergeorders" pro nil (lib "xmergeorders.pro" nil "Spextool") "%s" (nil))
   ("xmergexd_autoscale" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_cleanup" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, base" (nil))
   ("xmergexd_combinespec" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_cutscalespec" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_getminmax1" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_getminmax2" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_help" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_loadspec" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_mergespec" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_ploterror" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_plotflux" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_plotupdate" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_setminmax" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_writefile" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil))
   ("xmergexd_zoom" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, state" (nil ("IN") ("OUT")))
   ("xmergexd_event" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, event" (nil))
   ("xmergexd_minmax" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, event" (nil))
   ("xmergexd_plotwinevent1" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, event" (nil))
   ("xmergexd_plotwinevent2" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, event" (nil))
   ("xmergexd_resize" pro nil (lib "xmergexd.pro" nil "Spextool") "%s, event" (nil))
   ("xmergexd" pro nil (lib "xmergexd.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_startup" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s, image, instrfile" (nil))
   ("xmkcalfile_autoscale" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_cleanup" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s, event" (nil))
   ("xmkcalfile_color" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s, event" (nil ("BRIGHTNESS") ("CONTRAST")))
   ("xmkcalfile_colorbar" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_displayimage" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_identifyorders" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_loadimage" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s, image, instrfile" (nil))
   ("xmkcalfile_markorders" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_mkcalfile" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_minmax" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_plotdp" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_plotsp" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_scaleimage" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s" (nil))
   ("xmkcalfile_track" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s, event" (nil))
   ("xmkcalfile_plotwinevent" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s, event" (nil))
   ("xmkcalfile_quit" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s, event" (nil))
   ("xmkcalfile_event" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s, event" (nil))
   ("xmkcalfile" pro nil (lib "xmkcalfile.pro" nil "Spextool") "%s, image, instrfile" (nil))
   ("xmkinstrfile_initcommon" pro nil (lib "xmkinstrfile.pro" nil "Spextool") "%s" (nil))
   ("xmkinstrfile_bg" pro nil (lib "xmkinstrfile.pro" nil "Spextool") "%s" (nil))
   ("xmkinstrfile_cleanup" pro nil (lib "xmkinstrfile.pro" nil "Spextool") "%s, event" (nil))
   ("xmkinstrfile_loadimage" pro nil (lib "xmkinstrfile.pro" nil "Spextool") "%s" (nil))
   ("xmkinstrfile_makefile" pro nil (lib "xmkinstrfile.pro" nil "Spextool") "%s" (nil))
   ("xmkinstrfile_event" pro nil (lib "xmkinstrfile.pro" nil "Spextool") "%s, event" (nil))
   ("xmkinstrfile" pro nil (lib "xmkinstrfile.pro" nil "Spextool") "%s" (nil))
   ("xmkmask_initcommon" pro nil (lib "xmkmask.pro" nil "Spextool") "%s, wave, stack" (nil ("ISPECMASK") ("STACKMASK")))
   ("xmkmask_plotidwin" pro nil (lib "xmkmask.pro" nil "Spextool") "%s" (nil))
   ("xmkmask_plotspec" pro nil (lib "xmkmask.pro" nil "Spextool") "%s" (nil))
   ("xmkmask_plotupdate" pro nil (lib "xmkmask.pro" nil "Spextool") "%s" (nil))
   ("xmkmask_setminmax" pro nil (lib "xmkmask.pro" nil "Spextool") "%s" (nil))
   ("xmkmask_zoom" pro nil (lib "xmkmask.pro" nil "Spextool") "%s" (nil ("IN") ("OUT")))
   ("xmkmask_event" pro nil (lib "xmkmask.pro" nil "Spextool") "%s, event" (nil))
   ("xmkmask_minmax_event" pro nil (lib "xmkmask.pro" nil "Spextool") "%s, event" (nil))
   ("xmkmask_winevent" pro nil (lib "xmkmask.pro" nil "Spextool") "%s, event" (nil))
   ("xmkmask" pro nil (lib "xmkmask.pro" nil "Spextool") "%s, wave, stack, specmask" (nil ("CANCEL") ("GROUP_LEADER") ("ISPECMASK") ("STACKMASK") ("XUNITS") ("YUNITS")))
   ("xmkpixmask_initcommon" pro nil (lib "xmkpixmask.pro" nil "Spextool") "%s, wave, stack" (nil ("IPIXMASK") ("ISTACKMASK") ("XTITLE") ("YTITLE")))
   ("xmkpixmask_plotidwin" pro nil (lib "xmkpixmask.pro" nil "Spextool") "%s" (nil))
   ("xmkpixmask_plotspec" pro nil (lib "xmkpixmask.pro" nil "Spextool") "%s" (nil))
   ("xmkpixmask_plotupdate" pro nil (lib "xmkpixmask.pro" nil "Spextool") "%s" (nil))
   ("xmkpixmask_setminmax" pro nil (lib "xmkpixmask.pro" nil "Spextool") "%s" (nil))
   ("xmkpixmask_zoom" pro nil (lib "xmkpixmask.pro" nil "Spextool") "%s" (nil ("IN") ("OUT")))
   ("xmkpixmask_event" pro nil (lib "xmkpixmask.pro" nil "Spextool") "%s, event" (nil))
   ("xmkpixmask_minmax_event" pro nil (lib "xmkpixmask.pro" nil "Spextool") "%s, event" (nil))
   ("xmkpixmask_winevent" pro nil (lib "xmkpixmask.pro" nil "Spextool") "%s, event" (nil))
   ("xmkpixmask" fun nil (lib "xmkpixmask.pro" nil "Spextool") "Result = %s(wave, stack)" (nil ("CANCEL") ("GROUP_LEADER") ("IPIXMASK") ("ISTACKMASK") ("XTITLE") ("YTITLE")))
   ("xplotflatprofiles_initcommon" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s" (nil))
   ("xplotflatprofiles_cleanup" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s, event" (nil))
   ("xplotflatprofiles_minmax" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s" (nil))
   ("xplotflatprofiles_plot" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s" (nil ("PS")))
   ("xplotflatprofiles_plotprofiles" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s" (nil))
   ("xplotflatprofiles_range" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s" (nil))
   ("xplotflatprofiles_startup" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s" (nil ("GROUP_LEADER")))
   ("xplotflatprofiles_button_event" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s, event" (nil))
   ("xplotflatprofiles_plotwin_event" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s, event" (nil))
   ("xplotflatprofiles_resize" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s, event" (nil))
   ("xplotflatprofiles" pro nil (lib "xplotflatprofiles.pro" nil "Spextool") "%s, x, profiles, orders" (nil ("DISP") ("GROUP_LEADER") ("SPAT")))
   ("xplotprofiles_initcommon" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s" (nil))
   ("xplotprofiles_modwinsize" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s" (nil))
   ("xplotprofiles_cleanup" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s, event" (nil))
   ("xplotprofiles_minmax" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s" (nil))
   ("xplotprofiles_output" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s" (nil))
   ("xplotprofiles_plotupdate" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s" (nil ("PS")))
   ("xplotprofiles_plotprofiles" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s" (nil))
   ("xplotprofiles_range" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s" (nil))
   ("xplotprofiles_event" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s, event" (nil))
   ("xplotprofiles_plotwin_event" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s, event" (nil))
   ("xplotprofiles_resize" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s, event" (nil))
   ("xplotprofiles" pro nil (lib "xplotprofiles.pro" nil "Spextool") "%s, profiles, orders, doorders, slith_arc" (nil ("APPOS") ("BGFIT") ("CANCEL") ("CLEARAPPOS") ("GETAPPOS") ("GROUP_LEADER") ("MASK") ("NOTIFY") ("NOUPDATE") ("PSFAP")))
   ("xscalelines_initcommon" pro nil (lib "xscalelines.pro" nil "Spextool") "%s, std, stdorders, stdmag, stdbmv, wvega, fvega, fcvega, fc2vega, kernels, vshift, obj, objorders, objnaps, awave, atrans, hlines, hnames, initscale, scales" (nil ("VROT") ("XPUTS") ("XTITLE") ("YTITLE")))
   ("xscalelines_estimatescale" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_getminmax" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_makescale" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_makespec" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_maketelluric" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_plotscale" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_plotspec" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_plotupdate1" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_plotupdate2" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_setminmax" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_undocut" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil))
   ("xscalelines_whichpoint" pro nil (lib "xscalelines.pro" nil "Spextool") "%s, idx" (nil))
   ("xscalelines_zoom" pro nil (lib "xscalelines.pro" nil "Spextool") "%s" (nil ("IN") ("OUT")))
   ("xscalelines_event" pro nil (lib "xscalelines.pro" nil "Spextool") "%s, event" (nil))
   ("xscalelines_minmaxevent" pro nil (lib "xscalelines.pro" nil "Spextool") "%s, event" (nil))
   ("xscalelines_plotwin1event" pro nil (lib "xscalelines.pro" nil "Spextool") "%s, event" (nil))
   ("xscalelines_plotwin2event" pro nil (lib "xscalelines.pro" nil "Spextool") "%s, event" (nil))
   ("xscalelines_resizeevent" pro nil (lib "xscalelines.pro" nil "Spextool") "%s, event" (nil))
   ("xscalelines" pro nil (lib "xscalelines.pro" nil "Spextool") "%s, std, stdorders, stdmag, stdbmv, wvega, fvega, fcvega, fc2vega, kernels, vshift, obj, objorders, objnaps, awave, atrans, hlines, hnames, initscale, scales, cutreg" (nil ("CANCEL") ("PARENT") ("XPUTS") ("XTITLE") ("YTITLE")))
   ("xscalespec_initcommon" pro nil (lib "xscalespec.pro" nil "Spextool") "%s, wave, stack, mask" (nil ("XTITLE") ("YTITLE")))
   ("xscalespec_plotid" pro nil (lib "xscalespec.pro" nil "Spextool") "%s" (nil))
   ("xscalespec_plotspec" pro nil (lib "xscalespec.pro" nil "Spextool") "%s" (nil ("LINES")))
   ("xscalespec_plotupdate" pro nil (lib "xscalespec.pro" nil "Spextool") "%s" (nil ("LINES")))
   ("xscalespec_scalespec" pro nil (lib "xscalespec.pro" nil "Spextool") "%s" (nil))
   ("xscalespec_setminmax" pro nil (lib "xscalespec.pro" nil "Spextool") "%s" (nil))
   ("xscalespec_zoom" pro nil (lib "xscalespec.pro" nil "Spextool") "%s" (nil ("IN") ("OUT")))
   ("xscalespec_event" pro nil (lib "xscalespec.pro" nil "Spextool") "%s, event" (nil))
   ("xscalespec_minmax_event" pro nil (lib "xscalespec.pro" nil "Spextool") "%s, event" (nil))
   ("xscalespec_winevent" pro nil (lib "xscalespec.pro" nil "Spextool") "%s, event" (nil))
   ("xscalespec" pro nil (lib "xscalespec.pro" nil "Spextool") "%s, wave, stack, mask, scales, wrange" (nil ("CANCEL") ("GROUP_LEADER") ("XTITLE") ("YTITLE")))
   ("xselectspec_initcommon" pro nil (lib "xselectspec.pro" nil "Spextool") "%s, wave, stack" (nil ("IMASK") ("XTITLE") ("YTITLE")))
   ("xselectspec_plotidwin" pro nil (lib "xselectspec.pro" nil "Spextool") "%s" (nil))
   ("xselectspec_plotspec" pro nil (lib "xselectspec.pro" nil "Spextool") "%s" (nil))
   ("xselectspec_plotupdate" pro nil (lib "xselectspec.pro" nil "Spextool") "%s" (nil))
   ("xselectspec_setminmax" pro nil (lib "xselectspec.pro" nil "Spextool") "%s" (nil))
   ("xselectspec_zoom" pro nil (lib "xselectspec.pro" nil "Spextool") "%s" (nil ("IN") ("OUT")))
   ("xselectspec_event" pro nil (lib "xselectspec.pro" nil "Spextool") "%s, event" (nil))
   ("xselectspec_minmax_event" pro nil (lib "xselectspec.pro" nil "Spextool") "%s, event" (nil))
   ("xselectspec_winevent" pro nil (lib "xselectspec.pro" nil "Spextool") "%s, event" (nil))
   ("xselectspec" pro nil (lib "xselectspec.pro" nil "Spextool") "%s, wave, stack, mask" (nil ("CANCEL") ("GROUP_LEADER") ("IMASK") ("XTITLE") ("YTITLE")))
   ("xspex2text_event" pro nil (lib "xspex2text.pro" nil "Spextool") "%s, event" (nil))
   ("xspex2text_cleanup" pro nil (lib "xspex2text.pro" nil "Spextool") "%s, xspex2text_base" (nil))
   ("xspex2text_loadspec" pro nil (lib "xspex2text.pro" nil "Spextool") "%s, state" (nil))
   ("xspex2text_writespec" pro nil (lib "xspex2text.pro" nil "Spextool") "%s, state" (nil))
   ("xspex2text" pro nil (lib "xspex2text.pro" nil "Spextool") "%s, instrfile" (nil))
   ("xspextool_menuevent" pro nil (lib "xspextool.pro" nil "Spextool") "%s, event" (nil))
   ("xspextool_event" pro nil (lib "xspextool.pro" nil "Spextool") "%s, event" (nil))
   ("xspextool_fields" pro nil (lib "xspextool.pro" nil "Spextool") "%s, event" (nil))
   ("xspextool_cleanup" pro nil (lib "xspextool.pro" nil "Spextool") "%s, xspextool_base" (nil))
   ("xspextool_combine" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("BEEP") ("CANCEL")))
   ("xspextool_go" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil))
   ("xspextool_help" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil))
   ("xspextool_load1image" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool_loadimages" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("BEEP") ("CANCEL")))
   ("xspextool_message" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state, message" (nil))
   ("xspextool_mkarcs" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("BEEP") ("CANCEL")))
   ("xspextool_mkcals" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("BEEP")))
   ("xspextool_mkflat" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("BEEP") ("CANCEL")))
   ("xspextool_mkprofiles" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("BEEP") ("CANCEL") ("DISPLAY")))
   ("xspextool_mksky" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("BEEP") ("CANCEL")))
   ("xspextool_overridesigns" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil))
   ("xspextool_packagepath" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool_plottrace" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool_psapfind" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool_psdefineap" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool_psextract" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("BEEP") ("CANCEL")))
   ("xspextool_pstrace" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("BEEP") ("CANCEL")))
   ("xspextool_updateappos" pro nil (lib "xspextool.pro" nil "Spextool") "%s, event, state" (nil))
   ("xspextool_wavecal" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool_writespec" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool_writetrace" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool_xsapfind" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool_xsdefineap" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool_xsextract" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("BEEP") ("CANCEL")))
   ("xspextool_xstrace" pro nil (lib "xspextool.pro" nil "Spextool") "%s, state" (nil ("CANCEL")))
   ("xspextool" pro nil (lib "xspextool.pro" nil "Spextool") "%s, instrfile" (nil ("ENG") ("FAB") ("SMALL")))
   ("xtellcor_event" pro nil (lib "xtellcor.pro" nil "Spextool") "%s, event" (nil))
   ("xtellcor_cleanup" pro nil (lib "xtellcor.pro" nil "Spextool") "%s, base" (nil))
   ("xtellcor_changeunits" pro nil (lib "xtellcor.pro" nil "Spextool") "%s, wave, tellspec, tellspec_error, state" (nil))
   ("xtellcor_conkernel" pro nil (lib "xtellcor.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_contellspec" pro nil (lib "xtellcor.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_getscales" pro nil (lib "xtellcor.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_help" pro nil (lib "xtellcor.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_loadspec" pro nil (lib "xtellcor.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_getshift" pro nil (lib "xtellcor.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_writefile" pro nil (lib "xtellcor.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor" pro nil (lib "xtellcor.pro" nil "Spextool") "%s" (nil))
   ("xtellcor_basic_event" pro nil (lib "xtellcor_basic.pro" nil "Spextool") "%s, event" (nil))
   ("xtellcor_basic_changeunits" pro nil (lib "xtellcor_basic.pro" nil "Spextool") "%s, wave, spec, spec_error, state" (nil))
   ("xtellcor_basic_cleanup" pro nil (lib "xtellcor_basic.pro" nil "Spextool") "%s, base" (nil))
   ("xtellcor_basic_getshift" pro nil (lib "xtellcor_basic.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_basic_help" pro nil (lib "xtellcor_basic.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_basic_loadspec" pro nil (lib "xtellcor_basic.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_basic_tellcor" pro nil (lib "xtellcor_basic.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_basic" pro nil (lib "xtellcor_basic.pro" nil "Spextool") "%s" (nil))
   ("xtellcor_finish_event" pro nil (lib "xtellcor_finish.pro" nil "Spextool") "%s, event" (nil))
   ("xtellcor_finish_cleanup" pro nil (lib "xtellcor_finish.pro" nil "Spextool") "%s, base" (nil))
   ("xtellcor_finish_getshift" pro nil (lib "xtellcor_finish.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_finish_loadspec" pro nil (lib "xtellcor_finish.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_finish_tellcor" pro nil (lib "xtellcor_finish.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_finish" pro nil (lib "xtellcor_finish.pro" nil "Spextool") "%s" (nil))
   ("xtellcor_general_event" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s, event" (nil))
   ("xtellcor_general_cleanup" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s, base" (nil))
   ("xtellcor_general_changeunits" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s, wave, tellspec, tellspec_error, state" (nil))
   ("xtellcor_general_conkernel" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_general_contellspec" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_general_getscales" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_general_help" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_general_loadspec" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_general_getshift" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_general_writefile" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s, state" (nil))
   ("xtellcor_general" pro nil (lib "xtellcor_general.pro" nil "Spextool") "%s" (nil))
   ("xvspec_startup" pro nil (lib "xvspec.pro" nil "Spextool") "%s" (nil))
   ("xvspec_cleanup" pro nil (lib "xvspec.pro" nil "Spextool") "%s, base" (nil))
   ("xvspec_getminmax" pro nil (lib "xvspec.pro" nil "Spextool") "%s" (nil))
   ("xvspec_help" pro nil (lib "xvspec.pro" nil "Spextool") "%s" (nil))
   ("xvspec_loadspec" pro nil (lib "xvspec.pro" nil "Spextool") "%s, fullpath" (nil))
   ("xvspec_minmax" pro nil (lib "xvspec.pro" nil "Spextool") "%s" (nil))
   ("xvspec_modwinsize" pro nil (lib "xvspec.pro" nil "Spextool") "%s" (nil))
   ("xvspec_plotspec" pro nil (lib "xvspec.pro" nil "Spextool") "%s" (nil))
   ("xvspec_plotupdate" pro nil (lib "xvspec.pro" nil "Spextool") "%s" (nil ("PS")))
   ("xvspec_setminmax" pro nil (lib "xvspec.pro" nil "Spextool") "%s" (nil))
   ("xvspec_event" pro nil (lib "xvspec.pro" nil "Spextool") "%s, event" (nil))
   ("xvspec_plotwinevent" pro nil (lib "xvspec.pro" nil "Spextool") "%s, event" (nil))
   ("xvspec_resize" pro nil (lib "xvspec.pro" nil "Spextool") "%s, event" (nil))
   ("xvspec" pro nil (lib "xvspec.pro" nil "Spextool") "%s, file" (nil ("CANCEL")))
   ("xzoomplot_startup" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s" (nil))
   ("xzoomplot_cleanup" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s, xzoomplot_base" (nil))
   ("xzoomplot_cp" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s" (nil))
   ("xzoomplot_help" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s" (nil))
   ("xzoomplot_plotspec" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s" (nil ("PS")))
   ("xzoomplot_setminmax" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s" (nil))
   ("xzoomplot_writedata" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s" (nil))
   ("xzoomplot_zoom" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s" (nil ("IN") ("OUT")))
   ("xzoomplot_event" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s, event" (nil))
   ("xzoomplot_plotwin_event" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s, event" (nil))
   ("xzoomplot_minmax_event" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s, event" (nil))
   ("xzoomplot_resize_event" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s, event" (nil))
   ("xzoomplot" pro nil (lib "xzoomplot.pro" nil "Spextool") "%s, x, y" (nil ("CANCEL") ("TITLE") ("XLOG") ("XRANGE") ("XTITLE") ("ylog") ("YRANGE") ("YTITLE")))))
